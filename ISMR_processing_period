{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "22e1aee1-1084-4a09-9ede-c83281c79f40",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Import Dependencies and libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "63a436e7-abe5-405b-b7a8-e9ad70cf61f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import glob\n",
    "import tkinter as tk\n",
    "from tkinter import filedialog\n",
    "import matplotlib.pyplot as plt\n",
    "import datetime, calendar"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05d3a025-8ab6-4e31-ac78-2f1a556cb744",
   "metadata": {
    "tags": []
   },
   "source": [
    "# Reading septentrio file and concatenate"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "063308a9-d2d3-443e-a0a1-6e5d6cde19b6",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true,
    "tags": []
   },
   "source": [
    "### Duration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bc2976af-b644-4d5d-8126-9a56276a7b54",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter time in this format yyyy-mm-dd 2021-01-02\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2021-01-02 00:00:00\n",
      "21002\n"
     ]
    }
   ],
   "source": [
    "Start_date = input(\"Enter time in this format yyyy-mm-dd\")\n",
    "Start_date=datetime.datetime.strptime(Start_date, \"%Y-%m-%d\")\n",
    "print(Start_date)\n",
    "folder_name_first=int(Start_date.strftime('%y')+Start_date.strftime('%j'))\n",
    "print(folder_name_first)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "150cafdf-ac81-4b3c-9713-92c2b14ca3fd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter time in this format yyyy-mm-dd 2021-01-08\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2021-01-08 00:00:00\n",
      "21008\n"
     ]
    }
   ],
   "source": [
    "End_date = input(\"Enter time in this format yyyy-mm-dd\")\n",
    "End_date=datetime.datetime.strptime(End_date, \"%Y-%m-%d\")\n",
    "print(End_date)\n",
    "folder_name_last=int(End_date.strftime('%y')+End_date.strftime('%j'))\n",
    "print(folder_name_last)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1bb04ac9-4a59-42e0-9b0b-bd94d07a279d",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true,
    "tags": []
   },
   "source": [
    "### Select year directory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "af1a384f-6e64-457a-a70e-57b34a2ee44f",
   "metadata": {},
   "outputs": [],
   "source": [
    "root = tk.Tk()\n",
    "root.withdraw()\n",
    "#chose day folder \n",
    "file_path = filedialog.askdirectory()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f9300f06-a5bd-4232-b741-9286a23b491e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Files in folder 21002\n",
      "24\n",
      "Files in folder 21003\n",
      "24\n",
      "Files in folder 21004\n",
      "24\n",
      "Files in folder 21005\n",
      "24\n",
      "Files in folder 21006\n",
      "24\n",
      "Files in folder 21007\n",
      "24\n",
      "Files in folder 21008\n",
      "24\n"
     ]
    }
   ],
   "source": [
    "for j in range(folder_name_first,folder_name_last+1):\n",
    "    print('Files in folder {}'.format(str(j)))\n",
    "    path = file_path + '/'+str(j)+'/*.ismr'\n",
    "    files = glob.glob(path)\n",
    "    print(len(files))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3b0aea22-46f6-413b-80fb-2a6aa20af7b4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Files in folder 21002\n",
      "24\n",
      "Files in folder 21003\n",
      "48\n",
      "Files in folder 21004\n",
      "72\n",
      "Files in folder 21005\n",
      "96\n",
      "Files in folder 21006\n",
      "120\n",
      "Files in folder 21007\n",
      "144\n",
      "Files in folder 21008\n",
      "168\n"
     ]
    }
   ],
   "source": [
    "files1=[]\n",
    "for j in range(folder_name_first,folder_name_last+1):\n",
    "    print('Files in folder {}'.format(str(j)))\n",
    "    path = file_path + '/'+str(j)+'/*.ismr'\n",
    "    files1 = files1 + glob.glob(path)\n",
    "    print(len(files1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2d06d346-ea9a-4048-a232-a8a52aaca57c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['/media/bhuvi/Analysis/GNSS/2021/21002/SEPT002A.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21002/SEPT002B.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21002/SEPT002C.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21002/SEPT002D.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21002/SEPT002E.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21002/SEPT002F.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21002/SEPT002G.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21002/SEPT002H.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21002/SEPT002I.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21002/SEPT002J.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21002/SEPT002K.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21002/SEPT002L.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21002/SEPT002M.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21002/SEPT002N.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21002/SEPT002O.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21002/SEPT002P.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21002/SEPT002Q.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21002/SEPT002R.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21002/SEPT002S.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21002/SEPT002T.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21002/SEPT002U.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21002/SEPT002V.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21002/SEPT002W.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21002/SEPT002X.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21003/SEPT003A.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21003/SEPT003B.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21003/SEPT003C.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21003/SEPT003D.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21003/SEPT003E.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21003/SEPT003F.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21003/SEPT003G.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21003/SEPT003H.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21003/SEPT003I.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21003/SEPT003J.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21003/SEPT003K.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21003/SEPT003L.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21003/SEPT003M.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21003/SEPT003N.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21003/SEPT003O.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21003/SEPT003P.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21003/SEPT003Q.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21003/SEPT003R.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21003/SEPT003S.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21003/SEPT003T.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21003/SEPT003U.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21003/SEPT003V.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21003/SEPT003W.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21003/SEPT003X.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21004/SEPT004A.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21004/SEPT004B.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21004/SEPT004C.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21004/SEPT004D.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21004/SEPT004E.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21004/SEPT004F.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21004/SEPT004G.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21004/SEPT004H.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21004/SEPT004I.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21004/SEPT004J.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21004/SEPT004K.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21004/SEPT004L.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21004/SEPT004M.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21004/SEPT004N.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21004/SEPT004O.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21004/SEPT004P.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21004/SEPT004Q.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21004/SEPT004R.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21004/SEPT004S.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21004/SEPT004T.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21004/SEPT004U.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21004/SEPT004V.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21004/SEPT004W.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21004/SEPT004X.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21005/SEPT005A.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21005/SEPT005B.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21005/SEPT005C.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21005/SEPT005D.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21005/SEPT005E.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21005/SEPT005F.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21005/SEPT005G.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21005/SEPT005H.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21005/SEPT005I.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21005/SEPT005J.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21005/SEPT005K.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21005/SEPT005L.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21005/SEPT005M.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21005/SEPT005N.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21005/SEPT005O.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21005/SEPT005P.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21005/SEPT005Q.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21005/SEPT005R.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21005/SEPT005S.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21005/SEPT005T.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21005/SEPT005U.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21005/SEPT005V.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21005/SEPT005W.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21005/SEPT005X.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21006/SEPT006A.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21006/SEPT006B.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21006/SEPT006C.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21006/SEPT006D.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21006/SEPT006E.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21006/SEPT006F.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21006/SEPT006G.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21006/SEPT006H.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21006/SEPT006I.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21006/SEPT006J.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21006/SEPT006K.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21006/SEPT006L.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21006/SEPT006M.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21006/SEPT006N.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21006/SEPT006O.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21006/SEPT006P.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21006/SEPT006Q.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21006/SEPT006R.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21006/SEPT006S.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21006/SEPT006T.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21006/SEPT006U.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21006/SEPT006V.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21006/SEPT006W.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21006/SEPT006X.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21007/SEPT007A.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21007/SEPT007B.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21007/SEPT007C.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21007/SEPT007D.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21007/SEPT007E.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21007/SEPT007F.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21007/SEPT007G.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21007/SEPT007H.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21007/SEPT007I.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21007/SEPT007J.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21007/SEPT007K.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21007/SEPT007L.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21007/SEPT007M.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21007/SEPT007N.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21007/SEPT007O.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21007/SEPT007P.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21007/SEPT007Q.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21007/SEPT007R.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21007/SEPT007S.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21007/SEPT007T.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21007/SEPT007U.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21007/SEPT007V.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21007/SEPT007W.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21007/SEPT007X.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21008/SEPT008A.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21008/SEPT008B.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21008/SEPT008C.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21008/SEPT008D.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21008/SEPT008E.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21008/SEPT008F.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21008/SEPT008G.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21008/SEPT008H.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21008/SEPT008I.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21008/SEPT008J.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21008/SEPT008K.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21008/SEPT008L.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21008/SEPT008M.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21008/SEPT008N.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21008/SEPT008O.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21008/SEPT008P.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21008/SEPT008Q.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21008/SEPT008R.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21008/SEPT008S.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21008/SEPT008T.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21008/SEPT008U.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21008/SEPT008V.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21008/SEPT008W.21_.ismr',\n",
       " '/media/bhuvi/Analysis/GNSS/2021/21008/SEPT008X.21_.ismr']"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "files1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3bc5bb79-3815-4078-9a86-eab0100a6e43",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true,
    "tags": []
   },
   "source": [
    "### Checking if all files exist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "062c89bd-daf1-4518-855f-074c63c49a9e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Checking Folder: 21276\n",
      "SEPT276A.21_.ismr=> File exist\n",
      "SEPT276B.21_.ismr=> File exist\n",
      "SEPT276C.21_.ismr=> File exist\n",
      "SEPT276D.21_.ismr=> File exist\n",
      "SEPT276E.21_.ismr=> File exist\n",
      "SEPT276F.21_.ismr=> File exist\n",
      "SEPT276G.21_.ismr=> File exist\n",
      "SEPT276H.21_.ismr=> File exist\n",
      "SEPT276I.21_.ismr=> File exist\n",
      "SEPT276J.21_.ismr=> File exist\n",
      "SEPT276K.21_.ismr=> File exist\n",
      "SEPT276L.21_.ismr=> File exist\n",
      "SEPT276M.21_.ismr=> File exist\n",
      "SEPT276N.21_.ismr=> File exist\n",
      "SEPT276O.21_.ismr=> File exist\n",
      "SEPT276P.21_.ismr=> File exist\n",
      "SEPT276Q.21_.ismr=> File exist\n",
      "SEPT276R.21_.ismr=> File exist\n",
      "SEPT276S.21_.ismr=> File exist\n",
      "SEPT276T.21_.ismr=> File exist\n",
      "SEPT276U.21_.ismr=> File exist\n",
      "SEPT276V.21_.ismr=> File exist\n",
      "SEPT276W.21_.ismr=> File exist\n",
      "SEPT276X.21_.ismr=> File exist\n"
     ]
    }
   ],
   "source": [
    "import os.path\n",
    "import string\n",
    "Folder_name= file_path[-5:]\n",
    "print('Checking Folder: '+ Folder_name)\n",
    "for filename in os.listdir(file_path):\n",
    "    if filename.startswith(tuple(\"SEPT{doy}{hour_chr}.{year}_.ismr\".format(doy=file_path[-3:],hour_chr=chr(i),year=file_path[-5:-3])  for i in range(65,91))) :\n",
    "        print(filename +\"=> File exist\")\n",
    "    else:\n",
    "        print (\"=X> File not exist\")\n",
    "        \n",
    "        \n",
    "        #print(filename)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48f939ab-3378-49ea-8872-5f4ae4ab0fce",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true,
    "tags": []
   },
   "source": [
    "### Concatination of files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a4c17f6d-a6ab-46e9-b191-f6c702ae147f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter output file name:  trial_file\n"
     ]
    }
   ],
   "source": [
    "f_out_name = input('Enter output file name: ')+'.ismr'\n",
    "with open(f_out_name, \"w\") as outfile:\n",
    "    for filename in files1:\n",
    "        with open(filename) as infile:\n",
    "            contents = infile.read()\n",
    "            outfile.write(contents)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5492459c-0f26-42d9-83fd-7fa241f3db45",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/home/bhuvi/PhD_Docs\n"
     ]
    }
   ],
   "source": [
    "!pwd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12cd4a7c-7cf2-4f18-b9db-84a56b75e9e5",
   "metadata": {
    "tags": []
   },
   "source": [
    "# ISMR Data Processing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f33545ae-50a2-451f-b42c-964cf3360b15",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import datetime, calendar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ad69a512-6c10-4c55-b922-9761f01c1f27",
   "metadata": {},
   "outputs": [],
   "source": [
    "f_out_name='trial_file.ismr'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "01be5f6c-e594-4a67-b1f2-a28040bdeb09",
   "metadata": {},
   "outputs": [],
   "source": [
    "data= pd.read_csv(f_out_name,header=None) #import concated file of the day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fb492a47-27e9-411c-bbc8-1c4df3460eea",
   "metadata": {},
   "outputs": [],
   "source": [
    "data.columns=['WN','TOW','SVID', 'Value', 'Azimuth', 'Elevation', 'Sig1', 'Total_S4_Sig1',\n",
    "       'Correction_total_S4_Sig1', 'Phi01_Sig1_1', 'Phi03_Sig1_3',\n",
    "       'Phi10_Sig1_10', 'Phi30_Sig1_30', 'Phi60_Sig1_60',\n",
    "       'AvgCCD_Sig1_average_code-carrier_divergence',\n",
    "       'SigmaCCD_Sig1_standard_deviation_code-carrier_divergence',\n",
    "       'TEC_TOW-45s', 'dTEC_TOW-60s_TOW-45s', 'TEC_TOW-30s',\n",
    "       'dTEC_TOW-45s_TOW-30s', 'TEC_TOW-15s', 'dTEC_TOW-30s_TOW-15s',\n",
    "       'TEC_TOW', 'dTEC_TOW-15s_TOW', 'Sig1_lock_time',\n",
    "       'sbf2ismr_version_number', 'Lock_time_second_frequency_TEC',\n",
    "       'Averaged_C/N0_second_frequency_TEC_computation', 'SI_Index_Sig1',\n",
    "       'SI_Index_Sig1_numerator', 'p_Sig1_spectral_slope', 'Average_Sig2_C/N0',\n",
    "       'Total_S4_Sig2', 'Correction_total_S4_Sig2', 'Phi01_Sig2_1',\n",
    "       'Phi03_Sig2_3', 'Phi10_Sig2_10', 'Phi30_Sig2_30', 'Phi60_Sig2_60',\n",
    "       'AvgCCD_Sig2_average_code-carrier_divergence', 'SigmaCCD_Sig2_standard',\n",
    "       'Sig2_lock', 'SI_Index_Sig2', 'SI_Index_Sig2_numerator', 'p_Sig2_phase',\n",
    "       'Average_Sig3_C/N0_last_minute', 'Total_S4_Sig3',\n",
    "       'Correction_total_S4_Sig3', 'Phi01_Sig3_1_phase', 'Phi03_Sig3_3_phase',\n",
    "       'Phi10_Sig3_10_phase', 'Phi30_Sig3_30_phase', 'Phi60_Sig3_60_phase',\n",
    "       'AvgCCD_Sig3_average_code-carrier_divergence',\n",
    "       'SigmaCCD_Sig3_standard_deviation_code-carrier_divergence',\n",
    "       'Sig3_lock_time', 'SI_Index_Sig3', 'SI_Index_Sig3_numerator',\n",
    "       'p_Sig3_phase', 'T_Sig1_phase', 'T_Sig2_phase', 'T_Sig3_phase']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5fbc9ea2-cbe2-4dcd-aded-45d43c8417e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>WN</th>\n",
       "      <th>TOW</th>\n",
       "      <th>SVID</th>\n",
       "      <th>Value</th>\n",
       "      <th>Azimuth</th>\n",
       "      <th>Elevation</th>\n",
       "      <th>Sig1</th>\n",
       "      <th>Total_S4_Sig1</th>\n",
       "      <th>Correction_total_S4_Sig1</th>\n",
       "      <th>Phi01_Sig1_1</th>\n",
       "      <th>...</th>\n",
       "      <th>Phi60_Sig3_60_phase</th>\n",
       "      <th>AvgCCD_Sig3_average_code-carrier_divergence</th>\n",
       "      <th>SigmaCCD_Sig3_standard_deviation_code-carrier_divergence</th>\n",
       "      <th>Sig3_lock_time</th>\n",
       "      <th>SI_Index_Sig3</th>\n",
       "      <th>SI_Index_Sig3_numerator</th>\n",
       "      <th>p_Sig3_phase</th>\n",
       "      <th>T_Sig1_phase</th>\n",
       "      <th>T_Sig2_phase</th>\n",
       "      <th>T_Sig3_phase</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2138</td>\n",
       "      <td>518460</td>\n",
       "      <td>10</td>\n",
       "      <td>628</td>\n",
       "      <td>291.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>45.9</td>\n",
       "      <td>0.057</td>\n",
       "      <td>0.051</td>\n",
       "      <td>0.023</td>\n",
       "      <td>...</td>\n",
       "      <td>0.023</td>\n",
       "      <td>-1.221</td>\n",
       "      <td>0.061</td>\n",
       "      <td>3675</td>\n",
       "      <td>0.016</td>\n",
       "      <td>1.694</td>\n",
       "      <td>1.54</td>\n",
       "      <td>0.000060</td>\n",
       "      <td>0.000070</td>\n",
       "      <td>0.000045</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2138</td>\n",
       "      <td>518460</td>\n",
       "      <td>13</td>\n",
       "      <td>628</td>\n",
       "      <td>37.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>35.3</td>\n",
       "      <td>0.259</td>\n",
       "      <td>0.172</td>\n",
       "      <td>0.051</td>\n",
       "      <td>...</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>0.000298</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2138</td>\n",
       "      <td>518460</td>\n",
       "      <td>15</td>\n",
       "      <td>628</td>\n",
       "      <td>42.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0.069</td>\n",
       "      <td>0.056</td>\n",
       "      <td>0.022</td>\n",
       "      <td>...</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>0.000060</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2138</td>\n",
       "      <td>518460</td>\n",
       "      <td>16</td>\n",
       "      <td>628</td>\n",
       "      <td>281.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>35.8</td>\n",
       "      <td>0.217</td>\n",
       "      <td>0.163</td>\n",
       "      <td>0.072</td>\n",
       "      <td>...</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>0.000465</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2138</td>\n",
       "      <td>518460</td>\n",
       "      <td>18</td>\n",
       "      <td>628</td>\n",
       "      <td>27.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>46.3</td>\n",
       "      <td>0.050</td>\n",
       "      <td>0.048</td>\n",
       "      <td>0.015</td>\n",
       "      <td>...</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>0.000027</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>308243</th>\n",
       "      <td>2139</td>\n",
       "      <td>518400</td>\n",
       "      <td>130</td>\n",
       "      <td>628</td>\n",
       "      <td>101.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>39.2</td>\n",
       "      <td>0.145</td>\n",
       "      <td>0.109</td>\n",
       "      <td>nan</td>\n",
       "      <td>...</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>308244</th>\n",
       "      <td>2139</td>\n",
       "      <td>518400</td>\n",
       "      <td>132</td>\n",
       "      <td>628</td>\n",
       "      <td>140.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>42.4</td>\n",
       "      <td>0.080</td>\n",
       "      <td>0.076</td>\n",
       "      <td>0.061</td>\n",
       "      <td>...</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>0.000175</td>\n",
       "      <td>0.000142</td>\n",
       "      <td>nan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>308245</th>\n",
       "      <td>2139</td>\n",
       "      <td>518400</td>\n",
       "      <td>136</td>\n",
       "      <td>628</td>\n",
       "      <td>262.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>37.6</td>\n",
       "      <td>0.120</td>\n",
       "      <td>0.132</td>\n",
       "      <td>0.086</td>\n",
       "      <td>...</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>0.000597</td>\n",
       "      <td>0.000842</td>\n",
       "      <td>nan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>308246</th>\n",
       "      <td>2139</td>\n",
       "      <td>518400</td>\n",
       "      <td>137</td>\n",
       "      <td>628</td>\n",
       "      <td>107.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>38.1</td>\n",
       "      <td>0.148</td>\n",
       "      <td>0.125</td>\n",
       "      <td>0.060</td>\n",
       "      <td>...</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>0.000208</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>308247</th>\n",
       "      <td>2139</td>\n",
       "      <td>518400</td>\n",
       "      <td>140</td>\n",
       "      <td>628</td>\n",
       "      <td>138.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>47.2</td>\n",
       "      <td>0.058</td>\n",
       "      <td>0.044</td>\n",
       "      <td>0.126</td>\n",
       "      <td>...</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>0.000849</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>308248 rows × 62 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          WN     TOW  SVID  Value  Azimuth  Elevation  Sig1 Total_S4_Sig1  \\\n",
       "0       2138  518460    10    628    291.0       38.0  45.9         0.057   \n",
       "1       2138  518460    13    628     37.0        4.0  35.3         0.259   \n",
       "2       2138  518460    15    628     42.0       38.0  45.0         0.069   \n",
       "3       2138  518460    16    628    281.0        6.0  35.8         0.217   \n",
       "4       2138  518460    18    628     27.0       60.0  46.3         0.050   \n",
       "...      ...     ...   ...    ...      ...        ...   ...           ...   \n",
       "308243  2139  518400   130    628    101.0       15.0  39.2         0.145   \n",
       "308244  2139  518400   132    628    140.0       57.0  42.4         0.080   \n",
       "308245  2139  518400   136    628    262.0        9.0  37.6         0.120   \n",
       "308246  2139  518400   137    628    107.0       28.0  38.1         0.148   \n",
       "308247  2139  518400   140    628    138.0       56.0  47.2         0.058   \n",
       "\n",
       "       Correction_total_S4_Sig1 Phi01_Sig1_1  ... Phi60_Sig3_60_phase  \\\n",
       "0                         0.051        0.023  ...               0.023   \n",
       "1                         0.172        0.051  ...                 nan   \n",
       "2                         0.056        0.022  ...                 nan   \n",
       "3                         0.163        0.072  ...                 nan   \n",
       "4                         0.048        0.015  ...                 nan   \n",
       "...                         ...          ...  ...                 ...   \n",
       "308243                    0.109          nan  ...                 nan   \n",
       "308244                    0.076        0.061  ...                 nan   \n",
       "308245                    0.132        0.086  ...                 nan   \n",
       "308246                    0.125        0.060  ...                 nan   \n",
       "308247                    0.044        0.126  ...                 nan   \n",
       "\n",
       "       AvgCCD_Sig3_average_code-carrier_divergence  \\\n",
       "0                                           -1.221   \n",
       "1                                              nan   \n",
       "2                                              nan   \n",
       "3                                              nan   \n",
       "4                                              nan   \n",
       "...                                            ...   \n",
       "308243                                         nan   \n",
       "308244                                         nan   \n",
       "308245                                         nan   \n",
       "308246                                         nan   \n",
       "308247                                         nan   \n",
       "\n",
       "       SigmaCCD_Sig3_standard_deviation_code-carrier_divergence  \\\n",
       "0                                                   0.061         \n",
       "1                                                     nan         \n",
       "2                                                     nan         \n",
       "3                                                     nan         \n",
       "4                                                     nan         \n",
       "...                                                   ...         \n",
       "308243                                                nan         \n",
       "308244                                                nan         \n",
       "308245                                                nan         \n",
       "308246                                                nan         \n",
       "308247                                                nan         \n",
       "\n",
       "       Sig3_lock_time SI_Index_Sig3 SI_Index_Sig3_numerator p_Sig3_phase  \\\n",
       "0                3675         0.016                   1.694         1.54   \n",
       "1                 nan           nan                     nan          nan   \n",
       "2                 nan           nan                     nan          nan   \n",
       "3                 nan           nan                     nan          nan   \n",
       "4                 nan           nan                     nan          nan   \n",
       "...               ...           ...                     ...          ...   \n",
       "308243            nan           nan                     nan          nan   \n",
       "308244            nan           nan                     nan          nan   \n",
       "308245            nan           nan                     nan          nan   \n",
       "308246            nan           nan                     nan          nan   \n",
       "308247            nan           nan                     nan          nan   \n",
       "\n",
       "       T_Sig1_phase T_Sig2_phase T_Sig3_phase  \n",
       "0          0.000060     0.000070     0.000045  \n",
       "1          0.000298          nan          nan  \n",
       "2          0.000060          nan          nan  \n",
       "3          0.000465          nan          nan  \n",
       "4          0.000027          nan          nan  \n",
       "...             ...          ...          ...  \n",
       "308243          nan          nan          nan  \n",
       "308244     0.000175     0.000142          nan  \n",
       "308245     0.000597     0.000842          nan  \n",
       "308246     0.000208          nan          nan  \n",
       "308247     0.000849          nan          nan  \n",
       "\n",
       "[308248 rows x 62 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1bfdf923-d390-4d50-9674-9a65be6d603e",
   "metadata": {},
   "outputs": [],
   "source": [
    "##some functions\n",
    "def PRN_X(x):\n",
    "    sv = 'M' + str(x)\n",
    "    if 0 < x < 38:\n",
    "        sv = 'G' + str(x)\n",
    "    elif 37 < x < 62:\n",
    "        sv = 'R' + str(x)\n",
    "    elif 70 < x < 107:\n",
    "        if len(str(x)) > 2:\n",
    "            x = str(x)[-2:]\n",
    "        sv = 'E' + str(x)\n",
    "    elif 119 < x < 139:\n",
    "        if len(str(x)) > 2:\n",
    "            x = str(x)[-2:]\n",
    "        sv = 'S' + str(x)\n",
    "    elif 140 < x < 177:\n",
    "        if len(str(x)) > 2:\n",
    "            x = str(x)[-2:]\n",
    "        sv = 'C' + str(x)\n",
    "    elif 181 < x < 187:\n",
    "        if len(str(x)) > 2:\n",
    "            x = str(x)[-2:]\n",
    "        sv = 'J' + str(x)\n",
    "    return sv\n",
    "\n",
    "\n",
    "###==============================================###\n",
    "###\n",
    "def WN_TOWtoTIME(WN, TOW):\n",
    "    \"\"\"\"\n",
    "    Convert gpsweek and gpseconds to time\n",
    "    \"\"\"\n",
    "    import datetime, calendar\n",
    "    WN = float(WN)\n",
    "    TOW = float(TOW)\n",
    "    # print(gpsweek,gpsseconds)\n",
    "    leapseconds = 0   ####check \n",
    "    datetimeformat = \"%Y-%m-%d %H:%M:%S\"\n",
    "    epoch = datetime.datetime.strptime(\"1980-01-06 00:00:00\", datetimeformat)\n",
    "    elapsed = datetime.timedelta(days=(WN * 7), seconds=(TOW))\n",
    "    # return datetime.datetime.strftime(epoch + elapsed,datetimeformat)\n",
    "    return elapsed + epoch\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8f7197b1-8244-4a4e-b013-9b18ba0cd51f",
   "metadata": {},
   "outputs": [],
   "source": [
    "data['sv'] = data.SVID.apply(PRN_X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3afff747-769a-41aa-8ea1-d40f27ff28f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0          G10\n",
       "1          G13\n",
       "2          G15\n",
       "3          G16\n",
       "4          G18\n",
       "          ... \n",
       "308243     S30\n",
       "308244     S32\n",
       "308245     S36\n",
       "308246     S37\n",
       "308247    M140\n",
       "Name: sv, Length: 308248, dtype: object"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['sv']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f5b2e2f3-ecab-40c1-a0fd-98ca9a1269d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "data['Date_Time']=np.vectorize(WN_TOWtoTIME)(data['WN'],data['TOW'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2fab0706-036c-492a-b69a-83755a0216e4",
   "metadata": {
    "tags": []
   },
   "source": [
    "# Categorizing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "bd413775-bd6b-4a1b-ba4a-d7a837cbd898",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_41896/2991110376.py:1: FutureWarning: Boolean inputs to the `inclusive` argument are deprecated in favour of `both` or `neither`.\n",
      "  data_gps = data.loc[data['SVID'].between(1,37,inclusive =True)]\n",
      "/tmp/ipykernel_41896/2991110376.py:3: FutureWarning: Boolean inputs to the `inclusive` argument are deprecated in favour of `both` or `neither`.\n",
      "  data_glonass = data.loc[data['SVID'].between(38,61,inclusive =True)]\n",
      "/tmp/ipykernel_41896/2991110376.py:5: FutureWarning: Boolean inputs to the `inclusive` argument are deprecated in favour of `both` or `neither`.\n",
      "  data_gallileo = data.loc[data['SVID'].between(71,106,inclusive =True)]\n",
      "/tmp/ipykernel_41896/2991110376.py:8: FutureWarning: Boolean inputs to the `inclusive` argument are deprecated in favour of `both` or `neither`.\n",
      "  data_SBAS = data.loc[data['SVID'].between(120,138,inclusive =True)]\n",
      "/tmp/ipykernel_41896/2991110376.py:11: FutureWarning: Boolean inputs to the `inclusive` argument are deprecated in favour of `both` or `neither`.\n",
      "  data_compass = data.loc[data['SVID'].between(140,176,inclusive =True)]\n",
      "/tmp/ipykernel_41896/2991110376.py:14: FutureWarning: Boolean inputs to the `inclusive` argument are deprecated in favour of `both` or `neither`.\n",
      "  data_Qzss = data.loc[data['SVID'].between(181,187,inclusive =True)]\n"
     ]
    }
   ],
   "source": [
    "data_gps = data.loc[data['SVID'].between(1,37,inclusive =True)]\n",
    "\n",
    "data_glonass = data.loc[data['SVID'].between(38,61,inclusive =True)]\n",
    "\n",
    "data_gallileo = data.loc[data['SVID'].between(71,106,inclusive =True)]\n",
    "\n",
    "\n",
    "data_SBAS = data.loc[data['SVID'].between(120,138,inclusive =True)]\n",
    "\n",
    "\n",
    "data_compass = data.loc[data['SVID'].between(140,176,inclusive =True)]\n",
    "\n",
    "\n",
    "data_Qzss = data.loc[data['SVID'].between(181,187,inclusive =True)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "89c2847b-7a59-40cb-b4ad-e65a022ba485",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_41896/3060044312.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data_gps['JT'] = pd.DatetimeIndex(data_gps['Date_Time']).floor('d').to_julian_date()\n"
     ]
    }
   ],
   "source": [
    "data_gps['JT'] = pd.DatetimeIndex(data_gps['Date_Time']).floor('d').to_julian_date()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1311bdd4-14ff-4884-a036-b01f5ffcc3ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>WN</th>\n",
       "      <th>TOW</th>\n",
       "      <th>SVID</th>\n",
       "      <th>Value</th>\n",
       "      <th>Azimuth</th>\n",
       "      <th>Elevation</th>\n",
       "      <th>Sig1</th>\n",
       "      <th>Total_S4_Sig1</th>\n",
       "      <th>Correction_total_S4_Sig1</th>\n",
       "      <th>Phi01_Sig1_1</th>\n",
       "      <th>...</th>\n",
       "      <th>Sig3_lock_time</th>\n",
       "      <th>SI_Index_Sig3</th>\n",
       "      <th>SI_Index_Sig3_numerator</th>\n",
       "      <th>p_Sig3_phase</th>\n",
       "      <th>T_Sig1_phase</th>\n",
       "      <th>T_Sig2_phase</th>\n",
       "      <th>T_Sig3_phase</th>\n",
       "      <th>sv</th>\n",
       "      <th>Date_Time</th>\n",
       "      <th>JT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2138</td>\n",
       "      <td>518460</td>\n",
       "      <td>10</td>\n",
       "      <td>628</td>\n",
       "      <td>291.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>45.9</td>\n",
       "      <td>0.057</td>\n",
       "      <td>0.051</td>\n",
       "      <td>0.023</td>\n",
       "      <td>...</td>\n",
       "      <td>3675</td>\n",
       "      <td>0.016</td>\n",
       "      <td>1.694</td>\n",
       "      <td>1.54</td>\n",
       "      <td>0.000060</td>\n",
       "      <td>0.000070</td>\n",
       "      <td>0.000045</td>\n",
       "      <td>G10</td>\n",
       "      <td>2021-01-02 00:01:00</td>\n",
       "      <td>2459216.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2138</td>\n",
       "      <td>518460</td>\n",
       "      <td>15</td>\n",
       "      <td>628</td>\n",
       "      <td>42.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0.069</td>\n",
       "      <td>0.056</td>\n",
       "      <td>0.022</td>\n",
       "      <td>...</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>0.000060</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>G15</td>\n",
       "      <td>2021-01-02 00:01:00</td>\n",
       "      <td>2459216.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2138</td>\n",
       "      <td>518460</td>\n",
       "      <td>18</td>\n",
       "      <td>628</td>\n",
       "      <td>27.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>46.3</td>\n",
       "      <td>0.050</td>\n",
       "      <td>0.048</td>\n",
       "      <td>0.015</td>\n",
       "      <td>...</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>0.000027</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>G18</td>\n",
       "      <td>2021-01-02 00:01:00</td>\n",
       "      <td>2459216.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2138</td>\n",
       "      <td>518460</td>\n",
       "      <td>20</td>\n",
       "      <td>628</td>\n",
       "      <td>339.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>46.9</td>\n",
       "      <td>0.057</td>\n",
       "      <td>0.045</td>\n",
       "      <td>0.019</td>\n",
       "      <td>...</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>0.000051</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>G20</td>\n",
       "      <td>2021-01-02 00:01:00</td>\n",
       "      <td>2459216.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2138</td>\n",
       "      <td>518460</td>\n",
       "      <td>23</td>\n",
       "      <td>628</td>\n",
       "      <td>335.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>46.6</td>\n",
       "      <td>0.045</td>\n",
       "      <td>0.047</td>\n",
       "      <td>0.014</td>\n",
       "      <td>...</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>0.000023</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>G23</td>\n",
       "      <td>2021-01-02 00:01:00</td>\n",
       "      <td>2459216.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>308221</th>\n",
       "      <td>2139</td>\n",
       "      <td>518400</td>\n",
       "      <td>20</td>\n",
       "      <td>628</td>\n",
       "      <td>358.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>46.7</td>\n",
       "      <td>0.056</td>\n",
       "      <td>0.046</td>\n",
       "      <td>0.014</td>\n",
       "      <td>...</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>0.000024</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>G20</td>\n",
       "      <td>2021-01-09 00:00:00</td>\n",
       "      <td>2459223.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>308222</th>\n",
       "      <td>2139</td>\n",
       "      <td>518400</td>\n",
       "      <td>23</td>\n",
       "      <td>628</td>\n",
       "      <td>354.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>0.057</td>\n",
       "      <td>0.050</td>\n",
       "      <td>0.014</td>\n",
       "      <td>...</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>0.000027</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>G23</td>\n",
       "      <td>2021-01-09 00:00:00</td>\n",
       "      <td>2459223.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>308223</th>\n",
       "      <td>2139</td>\n",
       "      <td>518400</td>\n",
       "      <td>24</td>\n",
       "      <td>628</td>\n",
       "      <td>91.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>41.6</td>\n",
       "      <td>0.094</td>\n",
       "      <td>0.084</td>\n",
       "      <td>0.029</td>\n",
       "      <td>...</td>\n",
       "      <td>2436</td>\n",
       "      <td>0.014</td>\n",
       "      <td>1.418</td>\n",
       "      <td>1.60</td>\n",
       "      <td>0.000103</td>\n",
       "      <td>0.000130</td>\n",
       "      <td>0.000043</td>\n",
       "      <td>G24</td>\n",
       "      <td>2021-01-09 00:00:00</td>\n",
       "      <td>2459223.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>308226</th>\n",
       "      <td>2139</td>\n",
       "      <td>518400</td>\n",
       "      <td>29</td>\n",
       "      <td>628</td>\n",
       "      <td>171.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>42.6</td>\n",
       "      <td>0.079</td>\n",
       "      <td>0.074</td>\n",
       "      <td>0.023</td>\n",
       "      <td>...</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>0.000075</td>\n",
       "      <td>0.000163</td>\n",
       "      <td>nan</td>\n",
       "      <td>G29</td>\n",
       "      <td>2021-01-09 00:00:00</td>\n",
       "      <td>2459223.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>308227</th>\n",
       "      <td>2139</td>\n",
       "      <td>518400</td>\n",
       "      <td>32</td>\n",
       "      <td>628</td>\n",
       "      <td>218.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>45.8</td>\n",
       "      <td>0.059</td>\n",
       "      <td>0.051</td>\n",
       "      <td>0.024</td>\n",
       "      <td>...</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>0.000085</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>G32</td>\n",
       "      <td>2021-01-09 00:00:00</td>\n",
       "      <td>2459223.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>63866 rows × 65 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          WN     TOW  SVID  Value  Azimuth  Elevation  Sig1 Total_S4_Sig1  \\\n",
       "0       2138  518460    10    628    291.0       38.0  45.9         0.057   \n",
       "2       2138  518460    15    628     42.0       38.0  45.0         0.069   \n",
       "4       2138  518460    18    628     27.0       60.0  46.3         0.050   \n",
       "5       2138  518460    20    628    339.0       51.0  46.9         0.057   \n",
       "6       2138  518460    23    628    335.0       51.0  46.6         0.045   \n",
       "...      ...     ...   ...    ...      ...        ...   ...           ...   \n",
       "308221  2139  518400    20    628    358.0       50.0  46.7         0.056   \n",
       "308222  2139  518400    23    628    354.0       49.0  46.0         0.057   \n",
       "308223  2139  518400    24    628     91.0       29.0  41.6         0.094   \n",
       "308226  2139  518400    29    628    171.0       28.0  42.6         0.079   \n",
       "308227  2139  518400    32    628    218.0       37.0  45.8         0.059   \n",
       "\n",
       "       Correction_total_S4_Sig1 Phi01_Sig1_1  ... Sig3_lock_time  \\\n",
       "0                         0.051        0.023  ...           3675   \n",
       "2                         0.056        0.022  ...            nan   \n",
       "4                         0.048        0.015  ...            nan   \n",
       "5                         0.045        0.019  ...            nan   \n",
       "6                         0.047        0.014  ...            nan   \n",
       "...                         ...          ...  ...            ...   \n",
       "308221                    0.046        0.014  ...            nan   \n",
       "308222                    0.050        0.014  ...            nan   \n",
       "308223                    0.084        0.029  ...           2436   \n",
       "308226                    0.074        0.023  ...            nan   \n",
       "308227                    0.051        0.024  ...            nan   \n",
       "\n",
       "       SI_Index_Sig3 SI_Index_Sig3_numerator p_Sig3_phase T_Sig1_phase  \\\n",
       "0              0.016                   1.694         1.54     0.000060   \n",
       "2                nan                     nan          nan     0.000060   \n",
       "4                nan                     nan          nan     0.000027   \n",
       "5                nan                     nan          nan     0.000051   \n",
       "6                nan                     nan          nan     0.000023   \n",
       "...              ...                     ...          ...          ...   \n",
       "308221           nan                     nan          nan     0.000024   \n",
       "308222           nan                     nan          nan     0.000027   \n",
       "308223         0.014                   1.418         1.60     0.000103   \n",
       "308226           nan                     nan          nan     0.000075   \n",
       "308227           nan                     nan          nan     0.000085   \n",
       "\n",
       "       T_Sig2_phase T_Sig3_phase   sv           Date_Time         JT  \n",
       "0          0.000070     0.000045  G10 2021-01-02 00:01:00  2459216.5  \n",
       "2               nan          nan  G15 2021-01-02 00:01:00  2459216.5  \n",
       "4               nan          nan  G18 2021-01-02 00:01:00  2459216.5  \n",
       "5               nan          nan  G20 2021-01-02 00:01:00  2459216.5  \n",
       "6               nan          nan  G23 2021-01-02 00:01:00  2459216.5  \n",
       "...             ...          ...  ...                 ...        ...  \n",
       "308221          nan          nan  G20 2021-01-09 00:00:00  2459223.5  \n",
       "308222          nan          nan  G23 2021-01-09 00:00:00  2459223.5  \n",
       "308223     0.000130     0.000043  G24 2021-01-09 00:00:00  2459223.5  \n",
       "308226     0.000163          nan  G29 2021-01-09 00:00:00  2459223.5  \n",
       "308227          nan          nan  G32 2021-01-09 00:00:00  2459223.5  \n",
       "\n",
       "[63866 rows x 65 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_gps=data_gps[data_gps['Elevation'].astype(float) >=25]\n",
    "data_gps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c68495ef-ceec-4f15-bb82-9c79ea34d56a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#import ismrpy\n",
    "\n",
    "\n",
    "#data = ismrpy.read_ismr(filename = \"/home/bhuvi/PhD_Docs/concated_21011.ismr\",lat='22.5286469',lon='75.9236699',addition=True, Ipp=350, skiprows=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5f1a41f7-1154-4aee-9fa7-eba7e5b4a2b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_gps['Time']=data_gps.Date_Time.dt.time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b2a0e29a-a94a-4914-8583-d2000a02064e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>WN</th>\n",
       "      <th>TOW</th>\n",
       "      <th>SVID</th>\n",
       "      <th>Value</th>\n",
       "      <th>Azimuth</th>\n",
       "      <th>Elevation</th>\n",
       "      <th>Sig1</th>\n",
       "      <th>Total_S4_Sig1</th>\n",
       "      <th>Correction_total_S4_Sig1</th>\n",
       "      <th>Phi01_Sig1_1</th>\n",
       "      <th>...</th>\n",
       "      <th>SI_Index_Sig3</th>\n",
       "      <th>SI_Index_Sig3_numerator</th>\n",
       "      <th>p_Sig3_phase</th>\n",
       "      <th>T_Sig1_phase</th>\n",
       "      <th>T_Sig2_phase</th>\n",
       "      <th>T_Sig3_phase</th>\n",
       "      <th>sv</th>\n",
       "      <th>Date_Time</th>\n",
       "      <th>JT</th>\n",
       "      <th>Time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2138</td>\n",
       "      <td>518460</td>\n",
       "      <td>10</td>\n",
       "      <td>628</td>\n",
       "      <td>291.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>45.9</td>\n",
       "      <td>0.057</td>\n",
       "      <td>0.051</td>\n",
       "      <td>0.023</td>\n",
       "      <td>...</td>\n",
       "      <td>0.016</td>\n",
       "      <td>1.694</td>\n",
       "      <td>1.54</td>\n",
       "      <td>0.000060</td>\n",
       "      <td>0.000070</td>\n",
       "      <td>0.000045</td>\n",
       "      <td>G10</td>\n",
       "      <td>2021-01-02 00:01:00</td>\n",
       "      <td>2459216.5</td>\n",
       "      <td>00:01:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2138</td>\n",
       "      <td>518460</td>\n",
       "      <td>15</td>\n",
       "      <td>628</td>\n",
       "      <td>42.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0.069</td>\n",
       "      <td>0.056</td>\n",
       "      <td>0.022</td>\n",
       "      <td>...</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>0.000060</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>G15</td>\n",
       "      <td>2021-01-02 00:01:00</td>\n",
       "      <td>2459216.5</td>\n",
       "      <td>00:01:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2138</td>\n",
       "      <td>518460</td>\n",
       "      <td>18</td>\n",
       "      <td>628</td>\n",
       "      <td>27.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>46.3</td>\n",
       "      <td>0.050</td>\n",
       "      <td>0.048</td>\n",
       "      <td>0.015</td>\n",
       "      <td>...</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>0.000027</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>G18</td>\n",
       "      <td>2021-01-02 00:01:00</td>\n",
       "      <td>2459216.5</td>\n",
       "      <td>00:01:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2138</td>\n",
       "      <td>518460</td>\n",
       "      <td>20</td>\n",
       "      <td>628</td>\n",
       "      <td>339.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>46.9</td>\n",
       "      <td>0.057</td>\n",
       "      <td>0.045</td>\n",
       "      <td>0.019</td>\n",
       "      <td>...</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>0.000051</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>G20</td>\n",
       "      <td>2021-01-02 00:01:00</td>\n",
       "      <td>2459216.5</td>\n",
       "      <td>00:01:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2138</td>\n",
       "      <td>518460</td>\n",
       "      <td>23</td>\n",
       "      <td>628</td>\n",
       "      <td>335.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>46.6</td>\n",
       "      <td>0.045</td>\n",
       "      <td>0.047</td>\n",
       "      <td>0.014</td>\n",
       "      <td>...</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>0.000023</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>G23</td>\n",
       "      <td>2021-01-02 00:01:00</td>\n",
       "      <td>2459216.5</td>\n",
       "      <td>00:01:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>308221</th>\n",
       "      <td>2139</td>\n",
       "      <td>518400</td>\n",
       "      <td>20</td>\n",
       "      <td>628</td>\n",
       "      <td>358.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>46.7</td>\n",
       "      <td>0.056</td>\n",
       "      <td>0.046</td>\n",
       "      <td>0.014</td>\n",
       "      <td>...</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>0.000024</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>G20</td>\n",
       "      <td>2021-01-09 00:00:00</td>\n",
       "      <td>2459223.5</td>\n",
       "      <td>00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>308222</th>\n",
       "      <td>2139</td>\n",
       "      <td>518400</td>\n",
       "      <td>23</td>\n",
       "      <td>628</td>\n",
       "      <td>354.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>0.057</td>\n",
       "      <td>0.050</td>\n",
       "      <td>0.014</td>\n",
       "      <td>...</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>0.000027</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>G23</td>\n",
       "      <td>2021-01-09 00:00:00</td>\n",
       "      <td>2459223.5</td>\n",
       "      <td>00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>308223</th>\n",
       "      <td>2139</td>\n",
       "      <td>518400</td>\n",
       "      <td>24</td>\n",
       "      <td>628</td>\n",
       "      <td>91.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>41.6</td>\n",
       "      <td>0.094</td>\n",
       "      <td>0.084</td>\n",
       "      <td>0.029</td>\n",
       "      <td>...</td>\n",
       "      <td>0.014</td>\n",
       "      <td>1.418</td>\n",
       "      <td>1.60</td>\n",
       "      <td>0.000103</td>\n",
       "      <td>0.000130</td>\n",
       "      <td>0.000043</td>\n",
       "      <td>G24</td>\n",
       "      <td>2021-01-09 00:00:00</td>\n",
       "      <td>2459223.5</td>\n",
       "      <td>00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>308226</th>\n",
       "      <td>2139</td>\n",
       "      <td>518400</td>\n",
       "      <td>29</td>\n",
       "      <td>628</td>\n",
       "      <td>171.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>42.6</td>\n",
       "      <td>0.079</td>\n",
       "      <td>0.074</td>\n",
       "      <td>0.023</td>\n",
       "      <td>...</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>0.000075</td>\n",
       "      <td>0.000163</td>\n",
       "      <td>nan</td>\n",
       "      <td>G29</td>\n",
       "      <td>2021-01-09 00:00:00</td>\n",
       "      <td>2459223.5</td>\n",
       "      <td>00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>308227</th>\n",
       "      <td>2139</td>\n",
       "      <td>518400</td>\n",
       "      <td>32</td>\n",
       "      <td>628</td>\n",
       "      <td>218.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>45.8</td>\n",
       "      <td>0.059</td>\n",
       "      <td>0.051</td>\n",
       "      <td>0.024</td>\n",
       "      <td>...</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>0.000085</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>G32</td>\n",
       "      <td>2021-01-09 00:00:00</td>\n",
       "      <td>2459223.5</td>\n",
       "      <td>00:00:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>63866 rows × 66 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          WN     TOW  SVID  Value  Azimuth  Elevation  Sig1 Total_S4_Sig1  \\\n",
       "0       2138  518460    10    628    291.0       38.0  45.9         0.057   \n",
       "2       2138  518460    15    628     42.0       38.0  45.0         0.069   \n",
       "4       2138  518460    18    628     27.0       60.0  46.3         0.050   \n",
       "5       2138  518460    20    628    339.0       51.0  46.9         0.057   \n",
       "6       2138  518460    23    628    335.0       51.0  46.6         0.045   \n",
       "...      ...     ...   ...    ...      ...        ...   ...           ...   \n",
       "308221  2139  518400    20    628    358.0       50.0  46.7         0.056   \n",
       "308222  2139  518400    23    628    354.0       49.0  46.0         0.057   \n",
       "308223  2139  518400    24    628     91.0       29.0  41.6         0.094   \n",
       "308226  2139  518400    29    628    171.0       28.0  42.6         0.079   \n",
       "308227  2139  518400    32    628    218.0       37.0  45.8         0.059   \n",
       "\n",
       "       Correction_total_S4_Sig1 Phi01_Sig1_1  ... SI_Index_Sig3  \\\n",
       "0                         0.051        0.023  ...         0.016   \n",
       "2                         0.056        0.022  ...           nan   \n",
       "4                         0.048        0.015  ...           nan   \n",
       "5                         0.045        0.019  ...           nan   \n",
       "6                         0.047        0.014  ...           nan   \n",
       "...                         ...          ...  ...           ...   \n",
       "308221                    0.046        0.014  ...           nan   \n",
       "308222                    0.050        0.014  ...           nan   \n",
       "308223                    0.084        0.029  ...         0.014   \n",
       "308226                    0.074        0.023  ...           nan   \n",
       "308227                    0.051        0.024  ...           nan   \n",
       "\n",
       "       SI_Index_Sig3_numerator p_Sig3_phase T_Sig1_phase T_Sig2_phase  \\\n",
       "0                        1.694         1.54     0.000060     0.000070   \n",
       "2                          nan          nan     0.000060          nan   \n",
       "4                          nan          nan     0.000027          nan   \n",
       "5                          nan          nan     0.000051          nan   \n",
       "6                          nan          nan     0.000023          nan   \n",
       "...                        ...          ...          ...          ...   \n",
       "308221                     nan          nan     0.000024          nan   \n",
       "308222                     nan          nan     0.000027          nan   \n",
       "308223                   1.418         1.60     0.000103     0.000130   \n",
       "308226                     nan          nan     0.000075     0.000163   \n",
       "308227                     nan          nan     0.000085          nan   \n",
       "\n",
       "       T_Sig3_phase   sv           Date_Time         JT      Time  \n",
       "0          0.000045  G10 2021-01-02 00:01:00  2459216.5  00:01:00  \n",
       "2               nan  G15 2021-01-02 00:01:00  2459216.5  00:01:00  \n",
       "4               nan  G18 2021-01-02 00:01:00  2459216.5  00:01:00  \n",
       "5               nan  G20 2021-01-02 00:01:00  2459216.5  00:01:00  \n",
       "6               nan  G23 2021-01-02 00:01:00  2459216.5  00:01:00  \n",
       "...             ...  ...                 ...        ...       ...  \n",
       "308221          nan  G20 2021-01-09 00:00:00  2459223.5  00:00:00  \n",
       "308222          nan  G23 2021-01-09 00:00:00  2459223.5  00:00:00  \n",
       "308223     0.000043  G24 2021-01-09 00:00:00  2459223.5  00:00:00  \n",
       "308226          nan  G29 2021-01-09 00:00:00  2459223.5  00:00:00  \n",
       "308227          nan  G32 2021-01-09 00:00:00  2459223.5  00:00:00  \n",
       "\n",
       "[63866 rows x 66 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_gps['TEC_TOW']=data_gps['TEC_TOW'].astype(float)\n",
    "data_gps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "11a7e09b-aca2-4567-9910-df1cc147596c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([18629., 18630., 18631., 18632., 18633., 18634., 18635., 18636.]),\n",
       " [Text(0, 0, ''),\n",
       "  Text(0, 0, ''),\n",
       "  Text(0, 0, ''),\n",
       "  Text(0, 0, ''),\n",
       "  Text(0, 0, ''),\n",
       "  Text(0, 0, ''),\n",
       "  Text(0, 0, ''),\n",
       "  Text(0, 0, '')])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(data_gps.Date_Time,data_gps.TEC_TOW,'.')\n",
    "plt.xticks(rotation=90)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e6503d8d-260d-476e-b96d-552e6a691433",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_gps=data_gps.groupby(['Time']).apply(lambda gdf: gdf.assign(avg_TEC=lambda gdf: gdf['TEC_TOW'].mean()))#.droplevel(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "deda3649-cf29-4334-be92-c48d286911f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([18629., 18630., 18631., 18632., 18633., 18634., 18635., 18636.]),\n",
       " [Text(0, 0, ''),\n",
       "  Text(0, 0, ''),\n",
       "  Text(0, 0, ''),\n",
       "  Text(0, 0, ''),\n",
       "  Text(0, 0, ''),\n",
       "  Text(0, 0, ''),\n",
       "  Text(0, 0, ''),\n",
       "  Text(0, 0, '')])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(data_gps.Date_Time,data_gps.TEC_TOW,'.')\n",
    "plt.plot(data_gps.Date_Time,data_gps.avg_TEC,'r.',markersize=2)\n",
    "plt.xticks(rotation=90)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8bb58fcc-ced6-4c6a-a2ee-d152b683a2e6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
